{"version":3,"file":"component---src-pages-tags-js-815ba283ba0fdeb60059.js","mappings":"0KAIMA,EAAS,SAAH,OAAKC,EAAS,EAATA,UAAWC,EAAS,EAATA,UAAS,OAEjC,0BAAQC,MAAO,CACXC,WAAY,UACZC,aAAc,SAId,uBAAKC,UAAU,gDAAgDH,MAAO,CAClEC,WAAY,UACZC,aAAc,YAEd,uBAAKC,UAAU,mBACX,gBAAC,EAAAC,KAAI,CAACC,GAAG,IAAIF,UAAU,2BAAyB,iBAC7BL,GAEnB,0BAAQK,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WACxD,iBAAe,0BAA0B,gBAAc,yBACvD,gBAAc,QAAQ,aAAW,qBACrC,wBAAMH,UAAU,yBAEpB,uBAAKA,UAAU,2BAA2BI,GAAG,0BACzC,sBAAIJ,UAAU,mCACTJ,EAAUS,KAAI,SAAAC,GAAI,OACf,sBAAIN,UAAU,WAAWO,IAAKD,EAAKF,IAC/B,gBAAC,EAAAH,KAAI,CAACJ,MAAO,CAACW,MAAM,SAAWR,UAAU,WAAWE,GAAII,EAAKA,MACxDA,EAAKG,MAET,QAOpB,EAQbf,EAAOgB,aAAe,CAClBf,UAAU,GACVC,UAAU,IAGd,Q,8BCaA,EAzDe,SAAH,OAAKe,EAAQ,EAARA,SAAQ,OACrB,gBAAC,EAAAC,YAAW,CACRC,MAAK,aAmBLC,OAAQ,SAAAC,GAAI,OACR,gCACI,gBAAC,EAAM,CAACnB,UAAWmB,EAAKC,KAAKC,aAAarB,UAAWD,UAAWoB,EAAKC,KAAKC,aAAaC,QACvF,4BACKP,GAEL,gBAAC,IAAM,CAACQ,WAAYJ,EAAKC,KAAKC,aAAaE,aAC3C,gBAAC,UAAS,CACNC,UAAW,CACPC,MAAO,OACPC,OAAQ,OACRxB,WAAY,WACZyB,gBAAiB,UACjBf,MAAO,SAEXgB,aAAc,CACVH,MAAO,OACPC,OAAQ,OACRG,QAAS,QAEbC,QAAQ,SACRC,UAAW,GACXC,KAAM,GACNC,SAAS,EACTC,eAAgB,KAEpB,gBAAC,IAAa,MACf,GAET,C,yKCFN,UA7CiB,SAAH,WACQf,KACyBgB,EAAK,EAA1BC,kBAAqBD,MAEI,EADzBf,KACIC,aAAgBC,MAAK,OAI/C,gBAAC,IAAM,KACH,gBAAC,IAAS,KACN,gBAAC,IAAG,CAAClB,UAAW,aAChB,sBAAIA,UAAU,aAAW,QACzB,sBAAIA,UAAU,wBACT+B,EAAM1B,KAAI,SAAA4B,GAAG,OACV,sBAAI1B,IAAK0B,EAAIC,WAAYlC,UAAU,uFAC/B,gBAAC,EAAAC,KAAI,CAACC,GAAE,SAAW,IAAU+B,EAAIC,YAAW,KACvC,IAAUD,EAAIC,aAEnB,wBAAMlC,UAAU,iBAAiBiC,EAAIE,YACpC,OAKZ,EAuBN,IAgBMC,EAAO,WAAH,OAAS,sDAAqC,C,uBC1E/D,IAuBIC,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMC,GACtD,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAKE,aAC5C,IAEAC,EAAOC,QAAUP,C","sources":["webpack://museologi.st/./src/components/structure/nav.js","webpack://museologi.st/./src/components/layouts/layout.js","webpack://museologi.st/./src/pages/tags.js","webpack://museologi.st/./node_modules/lodash/kebabCase.js"],"sourcesContent":["import React from \"react\"\nimport {Link} from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nconst NavBar = ({siteTitle, menuLinks}) => (\n\n    <header style={{\n        background: \"#192036\",\n        marginBottom: \"3rem\",\n    }}\n    >\n\n        <nav className=\"navbar navbar-expand-lg navbar-dark fixed-top\" style={{\n            background: \"#192036\",\n            marginBottom: \"1.45rem\",\n        }}>\n            <div className=\"container-fluid\">\n                <Link to=\"/\" className=\"navbar-brand text-white\">\n                    Daniel Pett - {siteTitle}\n                </Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n                        data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\n                        {menuLinks.map(link => (\n                            <li className=\"nav-item\" key={link.id}>\n                                <Link style={{color: `white`}} className=\"nav-link\" to={link.link} >\n                                    {link.name}\n                                </Link>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n    </header>\n)\n\nNavBar.propTypes = {\n    siteTitle: PropTypes.string,\n    menuLinks: PropTypes.array\n}\n\nNavBar.defaultProps = {\n    siteTitle: ``,\n    menuLinks: ``\n}\n\nexport default NavBar","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {StaticQuery, graphql} from \"gatsby\"\nimport NavBar from \"../structure/nav\";\nimport Footer from \"../structure/footer\"\nimport BackToTop from 'react-back-to-top';\nimport CookieConsent from '../services/cookieconsent';\n\nconst Layout = ({children}) => (\n    <StaticQuery\n        query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            menuLinks {\n                name\n                link\n                id\n            }\n            aboutLinks {\n                name\n                link\n                id\n            }\n          }\n        }\n      }\n    `}\n        render={data => (\n            <>\n                <NavBar menuLinks={data.site.siteMetadata.menuLinks} siteTitle={data.site.siteMetadata.title}/>\n                <main>\n                    {children}\n                </main>\n                <Footer aboutLinks={data.site.siteMetadata.aboutLinks}/>\n                <BackToTop\n                    mainStyle={{\n                        width: '100%',\n                        height: '100%',\n                        background: 'url(...)',\n                        backgroundColor: '#192036',\n                        color: 'white'\n                    }}\n                    percentStyle={{\n                        width: '100%',\n                        height: '100%',\n                        display: 'none'\n                    }}\n                    animate='rotate'\n                    offsetTop={20}\n                    step={50}\n                    percent={false}\n                    visiblePercent={50}\n                />\n                <CookieConsent/>\n            </>\n        )}\n    />\n)\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Utilities\nimport {kebabCase, startCase} from \"lodash\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout  from \"../components/layouts/layout\"\nimport {Container,Row} from \"react-bootstrap\"\n\nconst TagsPage = ({\n                      data: {\n                          allMarkdownRemark: { group },\n                          site: {\n                              siteMetadata: { title },\n                          },\n                      },\n                  }) => (\n    <Layout>\n        <Container>\n            <Row className={\"post-body\"}>\n            <h1 className=\"ml-4 mt-4\">Tags</h1>\n            <ul className=\"list-group-flush row\">\n                {group.map(tag => (\n                    <li key={tag.fieldValue} className=\"list-item col-md-4 border-top py-2 d-flex justify-content-between align-items-start\">\n                        <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n                            {startCase(tag.fieldValue)}\n                        </Link>\n                        <span className=\"badge bg-dark\">{tag.totalCount}</span>\n                    </li>\n                ))}\n            </ul>\n            </Row>\n        </Container>\n    </Layout>\n)\n\nTagsPage.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            group: PropTypes.arrayOf(\n                PropTypes.shape({\n                    fieldValue: PropTypes.string.isRequired,\n                    totalCount: PropTypes.number.isRequired,\n                }).isRequired\n            ),\n        }),\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n            }),\n        }),\n    }),\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n\nexport const Head = () => <title>Tags used on this site</title>\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n"],"names":["NavBar","siteTitle","menuLinks","style","background","marginBottom","className","Link","to","type","id","map","link","key","color","name","defaultProps","children","StaticQuery","query","render","data","site","siteMetadata","title","aboutLinks","mainStyle","width","height","backgroundColor","percentStyle","display","animate","offsetTop","step","percent","visiblePercent","group","allMarkdownRemark","tag","fieldValue","totalCount","Head","kebabCase","createCompounder","result","word","index","toLowerCase","module","exports"],"sourceRoot":""}