{"version":3,"file":"component---src-pages-tags-js-de74f82a270f012f4f54.js","mappings":"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","sources":["webpack://museologi.st/./node_modules/lodash/kebabCase.js","webpack://museologi.st/./src/pages/tags.js","webpack://museologi.st/./src/components/structure/SEO.js","webpack://museologi.st/./src/hooks/use-site-metadata.js"],"sourcesContent":["var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Seo from \"../components/structure/SEO\";\n\n// Utilities\nimport {kebabCase, startCase} from \"lodash\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout  from \"../components/layouts/layout\"\nimport {Container,Row} from \"react-bootstrap\"\n\nconst TagsPage = ({\n                      data: {\n                          allMarkdownRemark: { group },\n                          site: {\n                              siteMetadata: { title },\n                          },\n                      },\n                  }) => (\n    <Layout>\n        <Container>\n            <Row className={\"post-body\"}>\n            <h1 className=\"ml-4 mt-4\">Tags</h1>\n            <ul className=\"list-group-flush row\">\n                {group.map(tag => (\n                    <li key={tag.fieldValue} className=\"list-item col-md-4 border-top py-2 d-flex justify-content-between align-items-start\">\n                        <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n                            {startCase(tag.fieldValue)}\n                        </Link>\n                        <span className=\"badge bg-dark\">{tag.totalCount}</span>\n                    </li>\n                ))}\n            </ul>\n            </Row>\n        </Container>\n    </Layout>\n)\n\nTagsPage.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            group: PropTypes.arrayOf(\n                PropTypes.shape({\n                    fieldValue: PropTypes.string.isRequired,\n                    totalCount: PropTypes.number.isRequired,\n                }).isRequired\n            ),\n        }),\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n            }),\n        }),\n    }),\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  allMarkdownRemark(limit: 2000) {\n    group(field: {frontmatter: {tags: SELECT}}) {\n      fieldValue\n      totalCount\n    }\n  }\n}\n`\n\nexport const Head = () => (\n    <Seo title={\"An index of tags used on this site\"} description={\"An indexed view of tags used on this site, with counts\"}/>\n)","import React from \"react\"\nimport { useSiteMetadata } from \"../../hooks/use-site-metadata\"\n\nfunction createSeoImage(featured, image) {\n    if (featured) {\n        return featured?.childImageSharp.gatsbyImageData.images.fallback.src;\n    }\n    return image;\n}\n\nconst Seo = ({ title, description, pathname, children, featured }) => {\n    const { title: defaultTitle, description: defaultDescription, image, siteUrl, twitterHandle } = useSiteMetadata()\n    const featuredImage = createSeoImage(featured,image);\n    const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${featuredImage}`,\n        url: `${siteUrl}${pathname || ``}`,\n        twitterHandle,\n    }\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={seo.title} />\n            <meta name=\"twitter:url\" content={seo.url} />\n            <meta name=\"twitter:description\" content={seo.description} />\n            <meta name=\"twitter:image\" content={seo.image} />\n            <meta name=\"twitter:creator\" content={seo.twitterHandle} />\n            <meta property=\"og:url\" content={seo.url.toString()} />\n            <meta property=\"og:title\" content={seo.title} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"og:site_name\" content=\"Museologi.st\" />\n            <meta property=\"og:description\" content={seo.description} />\n            <meta property=\"og:locale\" content=\"en-gb\" />\n            <meta property=\"og:image\" content={seo.image.toString()} />\n            <meta property=\"og:image:alt\" content=\"An image representing this post\" />\n            <meta property=\"og:image:width\" content=\"600\"/>\n            <meta property=\"og:image:width\" content=\"600\" />\n            <meta property=\"og:image:type\" content=\"image/jpeg\" />\n            {children}\n        </>\n    )\n}\n\nexport default Seo","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterHandle\n          image\n          siteUrl\n        }\n      }\n    }\n  `)\n\n    return data.site.siteMetadata\n}"],"names":["kebabCase","createCompounder","result","word","index","toLowerCase","module","exports","_ref","data","allMarkdownRemark","group","site","siteMetadata","title","React","Layout","Container","Row","className","map","tag","key","fieldValue","Link","to","_kebabCase","_startCase","totalCount","Head","Seo","description","pathname","children","featured","defaultTitle","defaultDescription","image","siteUrl","twitterHandle","useStaticQuery","featuredImage","childImageSharp","gatsbyImageData","images","fallback","src","createSeoImage","seo","url","name","content","property","toString"],"sourceRoot":""}